
(deftype pure [v])

(defprotocol FreeProtocol
  (wrap-free [x]
    (pure x))

  (evaluate [x eval-f]))

(deftype free-monad [v]
  ;; (assert (implements? map v))

  Stringable
  (string-list [_]
    (comp (list "<free-monad: ")
          (string-list v)
          (list ">")))

  FreeProtocol
  (wrap-free [x] x)

  (evaluate [_ eval]
    (eval (map v (fn [y]
                   (evaluate y eval))))))

;; (deftype app-fn [v]
;;   Stringable
;;   (string-list [_] (list "<AppFn>"))

;;   FreeProtocol
;;   (evaluate [_ f]
;;     (fn [& args]
;;       (evaluate (apply v args) f))))

(deftype free-app [v args]
  (assert (instance? List args))
  ;; (assert (implements? evaluate v))

  Stringable
  (string-list [_]
    (comp (list "(free-app ")
          (str v) " "
          (interpose (flat-map args string-list) " ")
          (list ")")))

  FreeProtocol
  (wrap-free [x] x)

  (evaluate [_ f]
    (apply (evaluate v f)
           (map args (fn [v]
                       (evaluate v f)))))

  Container
  (map [_ f]
    (free-app (map v (fn [g]
                       (fn [& args]
                         (f (apply g args)))))
              args))
  (wrap [_ x] (pure x))
  (apply [f apply-args]
    (free-app f apply-args))
  ;; (flat-map [fv f]
  ;;   (free-app (app-fn (fn [fx & xs]
  ;;                       (f (apply fx xs))))
  ;;             (cons v args)))
  )

(extend-type free-monad
  Container
  (map [fv f]
    (free-app (pure f) (list fv)))
  (wrap [_ x] (pure x))
  (apply [f args]
    (free-app f args))
  ;; (flat-map [_ f]
  ;;   (free-monad (map v (fn [y]
  ;;                        (flat-map y f)))))
  )

(extend-type pure
  Stringable
  (string-list [p]
    (comp (list "<pure: ")
          (string-list (.v p))
          (list ">")))

  FreeProtocol
  (wrap-free [x] x)

  (evaluate [p eval-f]
    (eval-f (.v p)))

  Container
  (map [fv f]
    (free-app (pure f) (list fv)))
  (wrap [_ x] (pure x))
  (apply [f apply-args]
    (free-app f apply-args))
  ;; (flat-map [_ f]
  ;;   (f v))
  )

(defn lift [x]
  (free-monad (map x wrap-free)))
